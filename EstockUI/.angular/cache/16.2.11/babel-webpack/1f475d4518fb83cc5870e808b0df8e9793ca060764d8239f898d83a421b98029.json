{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let CompanyComponent = class CompanyComponent {\n  constructor(authService, http, router, formBuilder) {\n    this.authService = authService;\n    this.http = http;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.companies = [];\n    this.searchText = '';\n  }\n  ngOnInit() {\n    this.companyForm = this.formBuilder.group({\n      companyCode: ['', Validators.required],\n      companyName: ['', Validators.required],\n      companyCEO: ['', Validators.required],\n      companyTurnover: ['', Validators.required],\n      companyWebsite: ['', Validators.required],\n      stockExchange: ['', Validators.required],\n      stockPrice: ['', Validators.required],\n      latestStockPrice: ['', Validators.required]\n    });\n    this.getAllCompanies();\n    //this.getMov();\n  }\n\n  submitForm() {\n    if (this.companyForm.invalid) {\n      return;\n    }\n    const url = 'http://localhost:8081/v1.0/market/company/register';\n    const token = sessionStorage.getItem('token');\n    const body = {\n      companyCode: this.companyForm.value.comapnyCode,\n      companyName: this.companyForm.value.companyName,\n      companyCEO: this.companyForm.value.companyCEO,\n      companyTurnover: this.companyForm.value.companyTurnover,\n      companyWebsite: this.companyForm.value.companyWebsite,\n      stockExchange: this.companyForm.value.stockExchange,\n      stockPrice: this.companyForm.value.stockPrice,\n      latestStockPrice: this.companyForm.value.latestStockPrice\n    };\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      })\n    };\n    console.log('Company Name:', this.companyForm.value.companyName);\n    this.http.post(url, body, httpOptions).subscribe(() => {\n      console.log('Company added successfully');\n      // Handle success response here\n      this.getAllCompanies();\n    }, error => {\n      console.error(error);\n      // Handle error response here\n    });\n  }\n\n  getAllCompanies() {\n    const url = 'http://localhost:8081/v1.0/market/company/getAll';\n    const token = sessionStorage.getItem('token');\n    console.log(\"Token -> \", token);\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      })\n    };\n    console.log(\"httpOptions -> \", httpOptions);\n    this.http.get(url, httpOptions).subscribe(movies => {\n      this.companies = movies.map(movie => ({\n        ...movie,\n        editMode: false\n      }));\n      const latestStockPrices = this.companies.map(company => company.latestStockPrice);\n      console.log('Latest Stock Prices:', latestStockPrices);\n    });\n  }\n};\nCompanyComponent = __decorate([Component({\n  selector: 'app-company',\n  templateUrl: './company.component.html',\n  styleUrls: ['./company.component.css']\n})], CompanyComponent);","map":{"version":3,"names":["HttpHeaders","Component","Validators","CompanyComponent","constructor","authService","http","router","formBuilder","companies","searchText","ngOnInit","companyForm","group","companyCode","required","companyName","companyCEO","companyTurnover","companyWebsite","stockExchange","stockPrice","latestStockPrice","getAllCompanies","submitForm","invalid","url","token","sessionStorage","getItem","body","value","comapnyCode","httpOptions","headers","console","log","post","subscribe","error","get","movies","map","movie","editMode","latestStockPrices","company","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\2107054\\Documents\\EstockUI\\src\\app\\company\\company.component.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { Company } from '../model/company';\nimport { AuthService } from '../service/auth.service';\nimport { EstockService } from '../service/EStock.service';\n\n@Component({\n  selector: 'app-company',\n  templateUrl: './company.component.html',\n  styleUrls: ['./company.component.css']\n})\nexport class CompanyComponent {\n  \n  companyForm!: FormGroup;\n  companies: Company[] = [];\n  searchText: string = '';\n  constructor(private authService: AuthService, private http: HttpClient, private router: Router,private formBuilder: FormBuilder) { }\n \n  ngOnInit() {\n    this.companyForm = this.formBuilder.group({\n      companyCode: ['', Validators.required],\n      companyName: ['', Validators.required],\n      companyCEO: ['', Validators.required],\n      companyTurnover: ['', Validators.required],\n      companyWebsite: ['', Validators.required],\n      stockExchange: ['', Validators.required],\n      stockPrice: ['', Validators.required],\n      latestStockPrice: ['', Validators.required],\n    });\n    this.getAllCompanies();\n    //this.getMov();\n   \n   \n  }\n  submitForm() {\n    if (this.companyForm.invalid) {\n      return;\n    }\n \n    const url = 'http://localhost:8081/v1.0/market/company/register';\n    const token = sessionStorage.getItem('token');\n    const body = {\n      companyCode: this.companyForm.value.comapnyCode,\n      companyName: this.companyForm.value.companyName,\n      companyCEO: this.companyForm.value.companyCEO,\n      companyTurnover: this.companyForm.value.companyTurnover,\n      companyWebsite: this.companyForm.value.companyWebsite,\n      stockExchange: this.companyForm.value.stockExchange,\n      stockPrice: this.companyForm.value.stockPrice,\n      latestStockPrice: this.companyForm.value.latestStockPrice,\n      \n    };\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      })\n    };\n \n    console.log('Company Name:', this.companyForm.value.companyName);\n    \n    this.http.post(url, body, httpOptions).subscribe(\n      () => {\n        console.log('Company added successfully');\n        // Handle success response here\n        this.getAllCompanies();\n      },\n      (error) => {\n        console.error(error);\n        // Handle error response here\n      }\n    );\n  }\ngetAllCompanies() {\n  const url = 'http://localhost:8081/v1.0/market/company/getAll';\n  const token = sessionStorage.getItem('token');\n\n  console.log(\"Token -> \", token);\n \n  const httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type':  'application/json',\n      'Authorization': 'Bearer ' + token\n    })\n  };\n  console.log(\"httpOptions -> \", httpOptions);\n  this.http.get<Company[]>(url, httpOptions).subscribe(movies => {\n    this.companies = movies.map(movie => ({\n      ...movie,\n      editMode: false\n    }));\n    const latestStockPrices = this.companies.map(company => company.latestStockPrice);\n        console.log('Latest Stock Prices:', latestStockPrices);\n  });\n}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}