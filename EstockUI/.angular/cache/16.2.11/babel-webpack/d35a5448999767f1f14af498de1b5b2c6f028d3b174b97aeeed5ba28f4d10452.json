{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class EstockService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrlEStockMarketApplication = 'http://localhost:8081';\n    this.apiUrlEStockMarketControllers = 'http://localhost:8080'; // Adjust the port as needed\n    this.apiUrl = 'http://localhost:8081/v1.0/market/company';\n    this.apiInfo = 'http://localhost:8081/v1.0/market/company/info';\n  }\n  updateCompany(companyCode, body) {\n    const url = `${this.apiUrl}/put/${companyCode}`;\n    const token = sessionStorage.getItem('token');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      })\n    };\n    return this.http.put(url, body, httpOptions).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    console.error('An error occurred:', error);\n    throw error;\n  }\n  getCompanyDetailsByCode(companyCode, token) {\n    const url = `${this.apiUrl}/getDetails/${companyCode}`;\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      })\n    };\n    return this.http.get(url, httpOptions);\n  }\n  static #_ = this.ɵfac = function EstockService_Factory(t) {\n    return new (t || EstockService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EstockService,\n    factory: EstockService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","catchError","EstockService","constructor","http","apiUrlEStockMarketApplication","apiUrlEStockMarketControllers","apiUrl","apiInfo","updateCompany","companyCode","body","url","token","sessionStorage","getItem","httpOptions","headers","put","pipe","handleError","error","console","getCompanyDetailsByCode","get","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\2107054\\Documents\\EstockUI\\src\\app\\service\\EStock.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { catchError, Observable } from 'rxjs';\r\nimport { Company } from '../model/company';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EstockService {\r\n\r\n  private apiUrlEStockMarketApplication = 'http://localhost:8081';\r\n  private apiUrlEStockMarketControllers = 'http://localhost:8080'; // Adjust the port as needed\r\n  private apiUrl = 'http://localhost:8081/v1.0/market/company';\r\n  private apiInfo = 'http://localhost:8081/v1.0/market/company/info'\r\n  constructor(private http: HttpClient) { }\r\n\r\n\r\n  updateCompany(companyCode: number, body: any): Observable<any> {\r\n    const url = `${this.apiUrl}/put/${companyCode}`;\r\n    const token = sessionStorage.getItem('token');\r\n\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + token\r\n      })\r\n    };\r\n\r\n    return this.http.put(url, body, httpOptions).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  private handleError(error: any): Observable<never> {\r\n    console.error('An error occurred:', error);\r\n    throw error;\r\n  }\r\n  getCompanyDetailsByCode(companyCode: number, token: string): Observable<Company> {\r\n    const url = `${this.apiUrl}/getDetails/${companyCode}`;\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`\r\n      })\r\n    };\r\n    return this.http.get<Company>(url, httpOptions);\r\n  }\r\n}\r\n\r\n//   addNewPrice(companyCode: number, price: any, token: string): Observable<any> {\r\n//     const url = `${this.apiUrlEStockMarketApplication}/v1.0/market/stock/add${companyCode}`;\r\n\r\n//     const httpOptions = {\r\n//       headers: new HttpHeaders({\r\n//         'Content-Type': 'application/json',\r\n//         'Authorization': 'Bearer ' + token\r\n//       })\r\n//     };\r\n\r\n//     return this.http.post(url, price, httpOptions);\r\n//   }\r\n\r\n  // Add other methods as needed based on your requirements\r\n//   getAllCompanies(): Observable<Company[]>{\r\n//     const url = 'http://localhost:8081/v1.0/market/company/getAll';\r\n//     const token = sessionStorage.getItem('token');\r\n \r\n//     const httpOptions = {\r\n//       headers: new HttpHeaders({\r\n//         'Content-Type':  'application/json',\r\n//         'Authorization': 'Bearer ' + token\r\n//       })\r\n//     };\r\n \r\n//     return this.http.get<Company[]>(url);\r\n//   }\r\n\r\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAASC,UAAU,QAAoB,MAAM;;;AAM7C,OAAM,MAAOC,aAAa;EAMxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAJhB,KAAAC,6BAA6B,GAAG,uBAAuB;IACvD,KAAAC,6BAA6B,GAAG,uBAAuB,CAAC,CAAC;IACzD,KAAAC,MAAM,GAAG,2CAA2C;IACpD,KAAAC,OAAO,GAAG,gDAAgD;EAC1B;EAGxCC,aAAaA,CAACC,WAAmB,EAAEC,IAAS;IAC1C,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACL,MAAM,QAAQG,WAAW,EAAE;IAC/C,MAAMG,KAAK,GAAGC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;IAE7C,MAAMC,WAAW,GAAG;MAClBC,OAAO,EAAE,IAAIjB,WAAW,CAAC;QACvB,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,SAAS,GAAGa;OAC9B;KACF;IAED,OAAO,IAAI,CAACT,IAAI,CAACc,GAAG,CAACN,GAAG,EAAED,IAAI,EAAEK,WAAW,CAAC,CAACG,IAAI,CAC/ClB,UAAU,CAAC,IAAI,CAACmB,WAAW,CAAC,CAC7B;EACH;EAEQA,WAAWA,CAACC,KAAU;IAC5BC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,MAAMA,KAAK;EACb;EACAE,uBAAuBA,CAACb,WAAmB,EAAEG,KAAa;IACxD,MAAMD,GAAG,GAAG,GAAG,IAAI,CAACL,MAAM,eAAeG,WAAW,EAAE;IACtD,MAAMM,WAAW,GAAG;MAClBC,OAAO,EAAE,IAAIjB,WAAW,CAAC;QACvB,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUa,KAAK;OACjC;KACF;IACD,OAAO,IAAI,CAACT,IAAI,CAACoB,GAAG,CAAUZ,GAAG,EAAEI,WAAW,CAAC;EACjD;EAAC,QAAAS,CAAA,G;qBAtCUvB,aAAa,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAb5B,aAAa;IAAA6B,OAAA,EAAb7B,aAAa,CAAA8B,IAAA;IAAAC,UAAA,EAFZ;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}