{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrlEstockMarketApplication = 'http://localhost:8081';\n    this.apiUrlSpringBootjwt = 'http://localhost:8080';\n  }\n  login(username, password) {\n    const url = `${this.apiUrlSpringBootjwt}/auth/v1.0/login`;\n    console.log(this.login);\n    return this.http.post(url, {\n      username,\n      password\n    });\n  }\n  logout() {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + sessionStorage.getItem('token')\n      })\n    };\n    const url = `${this.apiUrlSpringBootjwt}/logout`;\n    sessionStorage.clear();\n    return this.http.post(url, {}, {\n      responseType: 'text',\n      headers: httpOptions.headers\n    });\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","AuthService","constructor","http","apiUrlEstockMarketApplication","apiUrlSpringBootjwt","login","username","password","url","console","log","post","logout","httpOptions","headers","sessionStorage","getItem","clear","responseType","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\2107054\\Documents\\EstockUI\\src\\app\\service\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { LoginResponse } from '../model/loginresponse';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private apiUrlEstockMarketApplication = 'http://localhost:8081';\n  private apiUrlSpringBootjwt = 'http://localhost:8080';\n\n  constructor(private http: HttpClient) { }\n\n  login(username: string, password: string): Observable<LoginResponse> {\n    const url = `${this.apiUrlSpringBootjwt}/auth/v1.0/login`;\n    console.log(this.login);\n    return this.http.post<LoginResponse>(url, { username, password });\n  }\n\n  \n\n  logout(): Observable<any> {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + sessionStorage.getItem('token')\n      })\n    };\n\n    const url = `${this.apiUrlSpringBootjwt}/logout`;\n    sessionStorage.clear();\n    return this.http.post(url, {}, { responseType: 'text', headers: httpOptions.headers });\n  }\n\n  // Additional methods can be added based on your requirements\n\n}\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAO9D,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,6BAA6B,GAAG,uBAAuB;IACvD,KAAAC,mBAAmB,GAAG,uBAAuB;EAEb;EAExCC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACJ,mBAAmB,kBAAkB;IACzDK,OAAO,CAACC,GAAG,CAAC,IAAI,CAACL,KAAK,CAAC;IACvB,OAAO,IAAI,CAACH,IAAI,CAACS,IAAI,CAAgBH,GAAG,EAAE;MAAEF,QAAQ;MAAEC;IAAQ,CAAE,CAAC;EACnE;EAIAK,MAAMA,CAAA;IACJ,MAAMC,WAAW,GAAG;MAClBC,OAAO,EAAE,IAAIf,WAAW,CAAC;QACvB,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,SAAS,GAAGgB,cAAc,CAACC,OAAO,CAAC,OAAO;OAC5D;KACF;IAED,MAAMR,GAAG,GAAG,GAAG,IAAI,CAACJ,mBAAmB,SAAS;IAChDW,cAAc,CAACE,KAAK,EAAE;IACtB,OAAO,IAAI,CAACf,IAAI,CAACS,IAAI,CAACH,GAAG,EAAE,EAAE,EAAE;MAAEU,YAAY,EAAE,MAAM;MAAEJ,OAAO,EAAED,WAAW,CAACC;IAAO,CAAE,CAAC;EACxF;EAAC,QAAAK,CAAA,G;qBA1BUnB,WAAW,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXxB,WAAW;IAAAyB,OAAA,EAAXzB,WAAW,CAAA0B,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}