{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/router\";\nexport class UpdateCompanyComponent {\n  constructor(formBuilder, http, router, route) {\n    this.formBuilder = formBuilder;\n    this.http = http;\n    this.router = router;\n    this.route = route;\n  }\n  ngOnInit() {\n    // Initialize form and get company details for the given companyCode\n    this.updateForm = this.formBuilder.group({\n      companyName: ['', Validators.required],\n      companyCEO: ['', Validators.required],\n      companyTurnover: ['', Validators.required],\n      companyWebsite: ['', Validators.required],\n      stockExchange: ['', Validators.required]\n    });\n    // You might get companyCode from the route parameter\n    // const companyCodeParam = this.route.snapshot.paramMap.get('companyCode');\n    // this.companyCode = companyCodeParam ? +companyCodeParam : 0; // Use 0 or a default value if companyCode is null\n    if (this.companyCode) {\n      this.getCompanyDetails();\n    }\n  }\n  getCompanyDetails() {\n    // Fetch company details for the given companyId and populate the form\n    const url = `http://localhost:8081/v1.0/market/company/getById/${this.companyCode}`;\n    // Make an HTTP GET request to get the company details\n    // Update the form controls with the retrieved company details\n  }\n\n  submitUpdateForm() {\n    if (this.updateForm.invalid) {\n      return;\n    }\n    const url = `http://localhost:8081/v1.0/market/company/put/${this.companyCode}`;\n    const token = sessionStorage.getItem('token');\n    const body = {\n      companyName: this.updateForm.value.companyName,\n      companyCEO: this.updateForm.value.companyCEO,\n      companyTurnover: this.updateForm.value.companyTurnover,\n      companyWebsite: this.updateForm.value.companyWebsite,\n      stockExchange: this.updateForm.value.stockExchange\n    };\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      })\n    };\n    // Make an HTTP PUT request to update the company\n    this.http.put(url, body, httpOptions).subscribe(() => {\n      console.log('Company updated successfully');\n      // Navigate back to CompanyComponent to refresh the company list\n      this.router.navigate(['/company']);\n    }, error => {\n      console.error(error);\n      // Handle error response here\n    });\n  }\n  static #_ = this.ɵfac = function UpdateCompanyComponent_Factory(t) {\n    return new (t || UpdateCompanyComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: UpdateCompanyComponent,\n    selectors: [[\"app-update-company\"]],\n    decls: 15,\n    vars: 1,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"formControlName\", \"companyCode\", \"name\", \"companyCode\", \"type\", \"number\", \"placeholder\", \"Enter Company CODE\", \"required\", \"\", 1, \"form-control\"], [\"formControlName\", \"companyName\", \"name\", \"companyName\", \"type\", \"text\", \"placeholder\", \"Enter Company Name\", \"required\", \"\", 1, \"form-control\"], [\"formControlName\", \"companyCEO\", \"name\", \"companyCEO\", \"type\", \"text\", \"placeholder\", \"Enter companyCEO\", \"required\", \"\", 1, \"form-control\"], [\"formControlName\", \"companyTurnover\", \"name\", \"companyTurnover\", \"type\", \"number\", \"placeholder\", \"Enter companyTurnover\", \"required\", \"\", 1, \"form-control\"], [\"formControlName\", \"companyWebsite\", \"name\", \"companyWebsite\", \"type\", \"text\", \"placeholder\", \"Enter companyWebsite\", \"required\", \"\", 1, \"form-control\"], [\"formControlName\", \"stockExchange\", \"name\", \"stockExchange\", \"type\", \"text\", \"placeholder\", \"Enter stockExchange\", \"required\", \"\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-success\"]],\n    template: function UpdateCompanyComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function UpdateCompanyComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.submitUpdateForm();\n        });\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelement(2, \"input\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 1);\n        i0.ɵɵelement(4, \"input\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 1);\n        i0.ɵɵelement(6, \"input\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 1);\n        i0.ɵɵelement(8, \"input\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 1);\n        i0.ɵɵelement(10, \"input\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 1);\n        i0.ɵɵelement(12, \"input\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"button\", 8);\n        i0.ɵɵtext(14, \"Add Details\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.updateForm);\n      }\n    },\n    dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Validators","HttpHeaders","UpdateCompanyComponent","constructor","formBuilder","http","router","route","ngOnInit","updateForm","group","companyName","required","companyCEO","companyTurnover","companyWebsite","stockExchange","companyCode","getCompanyDetails","url","submitUpdateForm","invalid","token","sessionStorage","getItem","body","value","httpOptions","headers","put","subscribe","console","log","navigate","error","_","i0","ɵɵdirectiveInject","i1","FormBuilder","i2","HttpClient","i3","Router","ActivatedRoute","_2","selectors","decls","vars","consts","template","UpdateCompanyComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","UpdateCompanyComponent_Template_form_ngSubmit_0_listener","ɵɵelement","ɵɵelementEnd","ɵɵtext","ɵɵproperty"],"sources":["C:\\Users\\2107054\\Documents\\EstockUI\\src\\app\\update-company\\update-company.component.ts","C:\\Users\\2107054\\Documents\\EstockUI\\src\\app\\update-company\\update-company.component.html"],"sourcesContent":["// update-company.component.ts\n\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Company } from '../model/company';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Component({\n  selector: 'app-update-company',\n  templateUrl: './update-company.component.html',\n  styleUrls: ['./update-company.component.css']\n})\nexport class UpdateCompanyComponent implements OnInit {\n  updateForm!: FormGroup;\n  companyCode!: Company; // You might get this from the route parameter\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private http: HttpClient,\n    private router: Router,\n    private route: ActivatedRoute\n  ) { }\n\n  ngOnInit() {\n    // Initialize form and get company details for the given companyCode\n    this.updateForm = this.formBuilder.group({\n      companyName: ['', Validators.required],\n      companyCEO: ['', Validators.required],\n      companyTurnover: ['', Validators.required],\n      companyWebsite: ['', Validators.required],\n      stockExchange: ['', Validators.required],\n    });\n  \n    // You might get companyCode from the route parameter\n    // const companyCodeParam = this.route.snapshot.paramMap.get('companyCode');\n    // this.companyCode = companyCodeParam ? +companyCodeParam : 0; // Use 0 or a default value if companyCode is null\n  \n    if (this.companyCode) {\n      this.getCompanyDetails();\n    }\n  }\n  \n\n  getCompanyDetails() {\n    // Fetch company details for the given companyId and populate the form\n    const url = `http://localhost:8081/v1.0/market/company/getById/${this.companyCode}`;\n    // Make an HTTP GET request to get the company details\n    // Update the form controls with the retrieved company details\n  }\n\n  submitUpdateForm() {\n    if (this.updateForm.invalid) {\n      return;\n    }\n\n    const url = `http://localhost:8081/v1.0/market/company/put/${this.companyCode}`;\n    const token = sessionStorage.getItem('token');\n    const body = {\n      companyName: this.updateForm.value.companyName,\n      companyCEO: this.updateForm.value.companyCEO,\n      companyTurnover: this.updateForm.value.companyTurnover,\n      companyWebsite: this.updateForm.value.companyWebsite,\n      stockExchange: this.updateForm.value.stockExchange,\n    };\n\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      })\n    };\n\n    // Make an HTTP PUT request to update the company\n    this.http.put(url, body, httpOptions).subscribe(\n      () => {\n        console.log('Company updated successfully');\n        // Navigate back to CompanyComponent to refresh the company list\n        this.router.navigate(['/company']);\n      },\n      (error) => {\n        console.error(error);\n        // Handle error response here\n      }\n    );\n  }\n}\n","<form [formGroup]=\"updateForm\" (ngSubmit)=\"submitUpdateForm()\">\n    <div class=\"form-group\">\n        <input formControlName=\"companyCode\" name=\"companyCode\" class=\"form-control\" type=\"number\" placeholder=\"Enter Company CODE\" required>\n    </div>\n    <div class=\"form-group\">\n        <input formControlName=\"companyName\" name=\"companyName\" class=\"form-control\" type=\"text\" placeholder=\"Enter Company Name\" required>\n    </div>\n    <div class=\"form-group\">\n        <input formControlName=\"companyCEO\" name=\"companyCEO\" class=\"form-control\" type=\"text\" placeholder=\"Enter companyCEO\" required>\n    </div>\n    <div class=\"form-group\">\n        <input formControlName=\"companyTurnover\" name=\"companyTurnover\" class=\"form-control\" type=\"number\" placeholder=\"Enter companyTurnover\" required>\n    </div>\n    <div class=\"form-group\">\n        <input formControlName=\"companyWebsite\" name=\"companyWebsite\" class=\"form-control\" type=\"text\" placeholder=\"Enter companyWebsite\" required>\n    </div>\n    <div class=\"form-group\">\n        <input formControlName=\"stockExchange\" name=\"stockExchange\" class=\"form-control\" type=\"text\" placeholder=\"Enter stockExchange\" required>\n    </div>\n    <!-- <div class=\"form-group\">\n        <input name=\"stockPrice\" class=\"form-control\" type=\"text\" placeholder=\"Enter stockPrice\" required>\n    </div> -->\n    <button class=\"btn btn-success\" type=\"submit\" >Add Details</button>\n</form><!-- Add other form fields as needed -->"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}