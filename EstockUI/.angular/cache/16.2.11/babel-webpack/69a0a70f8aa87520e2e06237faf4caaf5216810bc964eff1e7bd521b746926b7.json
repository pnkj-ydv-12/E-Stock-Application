{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nexport let LoginComponent = class LoginComponent {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n    this.isError = false;\n  }\n  ngOnInit() {\n    this.loginForm = new FormGroup({\n      'username': new FormControl(null, Validators.required),\n      'password': new FormControl(null, Validators.required)\n    });\n  }\n  onSubmit() {\n    console.log(this.loginForm.value);\n    this.login(this.loginForm.value);\n  }\n  logout() {\n    // clear specific session storage items\n    sessionStorage.removeItem('user');\n    sessionStorage.removeItem('token');\n  }\n  login(userData) {\n    this.authService.login(userData.loginID, userData.password).subscribe(response => {\n      console.log(response);\n      //making sure the user is loggedout\n      this.logout();\n      // handle your response here\n      sessionStorage.setItem('user', JSON.stringify(response.user));\n      sessionStorage.setItem('token', response.token);\n      console.log(\"Logging Session Item -> \");\n      let userItem = sessionStorage.getItem('user');\n      let jwtTokenItem = sessionStorage.getItem('token');\n      if (userItem !== null) {\n        let user = JSON.parse(userItem);\n        console.log(\"username -> \", user.username);\n        console.log(\"password -> \", user.password);\n        if (user.role === 'admin') {\n          this.router.navigate(['/company']);\n        } else if (user.role === 'user') {\n          this.router.navigate(['/dasboard']);\n        }\n      } else {\n        console.error(\"User not found in sessionStorage\");\n      }\n      if (jwtTokenItem !== null) {\n        let jwtToken = jwtTokenItem;\n        console.log(\"token -> \", token);\n      } else {\n        console.error(\"JwtToken not found in sessionStorage\");\n      }\n    }, error => {\n      console.error(error);\n      this.isError = true;\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);\nfunction token(arg0, token) {\n  throw new Error('Function not implemented.');\n}","map":{"version":3,"names":["Component","FormGroup","FormControl","Validators","LoginComponent","constructor","authService","router","isError","ngOnInit","loginForm","required","onSubmit","console","log","value","login","logout","sessionStorage","removeItem","userData","loginID","password","subscribe","response","setItem","JSON","stringify","user","token","userItem","getItem","jwtTokenItem","parse","username","role","navigate","error","jwtToken","__decorate","selector","templateUrl","styleUrls","arg0","Error"],"sources":["C:\\Users\\2107054\\Documents\\EstockUI\\src\\app\\login\\login.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { LoginResponse } from '../model/loginresponse';\nimport { AuthService } from '../service/auth.service';\n \n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  loginForm!: FormGroup;\n  isError = false;\n \n  constructor(private authService: AuthService, private router: Router) {}\n \n  ngOnInit(): void {\n    this.loginForm = new FormGroup({\n      'username': new FormControl(null, Validators.required),\n      'password': new FormControl(null, Validators.required),\n    });\n  }\n \n  onSubmit(): void {\n    console.log(this.loginForm.value);\n    this.login(this.loginForm.value);\n  }\n \n  logout(): void {\n    // clear specific session storage items\n    sessionStorage.removeItem('user');\n    sessionStorage.removeItem('token');\n  }\n \n \n  login(userData: any): void {\n    this.authService.login(userData.loginID, userData.password).subscribe(\n      (response: LoginResponse) => {\n        console.log(response);\n \n        //making sure the user is loggedout\n        this.logout();\n        // handle your response here\n        sessionStorage.setItem('user', JSON.stringify(response.user));\n        sessionStorage.setItem('token', response.token);\n \n        console.log(\"Logging Session Item -> \");\n \n        let userItem = sessionStorage.getItem('user');\n        let jwtTokenItem = sessionStorage.getItem('token');\n \n        if (userItem !== null) {\n          let user = JSON.parse(userItem);\n          console.log(\"username -> \", user.username);\n          console.log(\"password -> \", user.password);\n \n          if (user.role === 'admin') {\n            this.router.navigate(['/company']);\n          }else if(user.role === 'user'){\n            this.router.navigate(['/dasboard'])\n          }\n         \n        } else {\n          console.error(\"User not found in sessionStorage\");\n        }\n \n        if (jwtTokenItem !== null) {\n          let jwtToken = jwtTokenItem;\n          console.log(\"token -> \", token);\n        } else {\n          console.error(\"JwtToken not found in sessionStorage\");\n        }\n      },\n      error => {\n        console.error(error);\n        this.isError = true;\n      }\n    );\n  }\n \n}\n\nfunction token(arg0: string, token: any) {\n  throw new Error('Function not implemented.');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}