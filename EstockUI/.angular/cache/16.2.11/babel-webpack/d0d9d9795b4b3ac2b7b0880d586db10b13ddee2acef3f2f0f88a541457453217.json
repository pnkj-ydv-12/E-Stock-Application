{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class EstockService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrlEStockMarketApplication = 'http://localhost:8081';\n    this.apiUrlEStockMarketControllers = 'http://localhost:8080'; // Adjust the port as needed\n  }\n\n  getAllCompanies() {\n    const url = 'http://localhost:8081/v1.0/market/company/getAll';\n    const token = sessionStorage.getItem('token');\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      })\n    };\n    return this.http.get(url);\n  }\n  addNewPrice(companyCode, price, token) {\n    const url = `${this.apiUrlEStockMarketApplication}/v1.0/market/stock/add${companyCode}`;\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      })\n    };\n    return this.http.post(url, price, httpOptions);\n  }\n  static #_ = this.ɵfac = function EstockService_Factory(t) {\n    return new (t || EstockService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EstockService,\n    factory: EstockService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","EstockService","constructor","http","apiUrlEStockMarketApplication","apiUrlEStockMarketControllers","getAllCompanies","url","token","sessionStorage","getItem","httpOptions","headers","get","addNewPrice","companyCode","price","post","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\2107054\\Documents\\EstockUI\\src\\app\\service\\EStock.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Company } from '../model/company';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EstockService {\r\n\r\n  private apiUrlEStockMarketApplication = 'http://localhost:8081';\r\n  private apiUrlEStockMarketControllers = 'http://localhost:8080'; // Adjust the port as needed\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getAllCompanies(): Observable<Company[]>{\r\n    const url = 'http://localhost:8081/v1.0/market/company/getAll';\r\n    const token = sessionStorage.getItem('token');\r\n \r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type':  'application/json',\r\n        'Authorization': 'Bearer ' + token\r\n      })\r\n    };\r\n \r\n    return this.http.get<Company[]>(url);\r\n  }\r\n\r\n  addNewPrice(companyCode: number, price: any, token: string): Observable<any> {\r\n    const url = `${this.apiUrlEStockMarketApplication}/v1.0/market/stock/add${companyCode}`;\r\n\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Bearer ' + token\r\n      })\r\n    };\r\n\r\n    return this.http.post(url, price, httpOptions);\r\n  }\r\n\r\n  // Add other methods as needed based on your requirements\r\n\r\n}\r\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAO9D,OAAM,MAAOC,aAAa;EAKxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,6BAA6B,GAAG,uBAAuB;IACvD,KAAAC,6BAA6B,GAAG,uBAAuB,CAAC,CAAC;EAEzB;;EAExCC,eAAeA,CAAA;IACb,MAAMC,GAAG,GAAG,kDAAkD;IAC9D,MAAMC,KAAK,GAAGC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;IAE7C,MAAMC,WAAW,GAAG;MAClBC,OAAO,EAAE,IAAIZ,WAAW,CAAC;QACvB,cAAc,EAAG,kBAAkB;QACnC,eAAe,EAAE,SAAS,GAAGQ;OAC9B;KACF;IAED,OAAO,IAAI,CAACL,IAAI,CAACU,GAAG,CAAYN,GAAG,CAAC;EACtC;EAEAO,WAAWA,CAACC,WAAmB,EAAEC,KAAU,EAAER,KAAa;IACxD,MAAMD,GAAG,GAAG,GAAG,IAAI,CAACH,6BAA6B,yBAAyBW,WAAW,EAAE;IAEvF,MAAMJ,WAAW,GAAG;MAClBC,OAAO,EAAE,IAAIZ,WAAW,CAAC;QACvB,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,SAAS,GAAGQ;OAC9B;KACF;IAED,OAAO,IAAI,CAACL,IAAI,CAACc,IAAI,CAACV,GAAG,EAAES,KAAK,EAAEL,WAAW,CAAC;EAChD;EAAC,QAAAO,CAAA,G;qBAhCUjB,aAAa,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAbtB,aAAa;IAAAuB,OAAA,EAAbvB,aAAa,CAAAwB,IAAA;IAAAC,UAAA,EAFZ;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}