{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/forms\";\nexport class CompanyUpdateModalComponent {\n  constructor(http, formBuilder) {\n    this.http = http;\n    this.formBuilder = formBuilder;\n    this.company = null;\n    this.closeModal = new EventEmitter();\n  }\n  ngOnInit() {\n    this.updateForm = this.formBuilder.group({\n      // ... your form controls, pre-filled with company data\n    });\n  }\n  submitUpdate() {\n    if (this.updateForm.invalid || !this.company) {\n      return;\n    }\n    const url = `http://localhost:8081/v1.0/market/company/put/${this.company.companyCode}`;\n    const token = sessionStorage.getItem('token');\n    const body = {\n      // ... update with your form controls\n    };\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      })\n    };\n    this.http.put(url, body, httpOptions).subscribe(() => {\n      console.log('Company updated successfully');\n      this.closeModal.emit();\n    }, error => {\n      console.error(error);\n    });\n  }\n  static #_ = this.ɵfac = function CompanyUpdateModalComponent_Factory(t) {\n    return new (t || CompanyUpdateModalComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.FormBuilder));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CompanyUpdateModalComponent,\n    selectors: [[\"app-company-update-modal\"]],\n    inputs: {\n      company: \"company\"\n    },\n    outputs: {\n      closeModal: \"closeModal\"\n    },\n    decls: 2,\n    vars: 0,\n    template: function CompanyUpdateModalComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"company-update-modal works!\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["EventEmitter","HttpHeaders","CompanyUpdateModalComponent","constructor","http","formBuilder","company","closeModal","ngOnInit","updateForm","group","submitUpdate","invalid","url","companyCode","token","sessionStorage","getItem","body","httpOptions","headers","put","subscribe","console","log","emit","error","_","i0","ɵɵdirectiveInject","i1","HttpClient","i2","FormBuilder","_2","selectors","inputs","outputs","decls","vars","template","CompanyUpdateModalComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["C:\\Users\\2107054\\Documents\\EstockUI\\src\\app\\company-update-modal\\company-update-modal.component.ts","C:\\Users\\2107054\\Documents\\EstockUI\\src\\app\\company-update-modal\\company-update-modal.component.html"],"sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Company } from '../model/company';\n\n\n@Component({\n  selector: 'app-company-update-modal',\n  templateUrl: './company-update-modal.component.html',\n  styleUrls: ['./company-update-modal.component.css']\n})\nexport class CompanyUpdateModalComponent implements OnInit {\n  @Input() company: Company | null = null;\n  @Output() closeModal = new EventEmitter<void>();\n\n  updateForm!: FormGroup;\n\n  constructor(\n    private http: HttpClient,\n    private formBuilder: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.updateForm = this.formBuilder.group({\n      // ... your form controls, pre-filled with company data\n    });\n  }\n\n  submitUpdate() {\n    if (this.updateForm.invalid || !this.company) {\n      return;\n    }\n\n    const url = `http://localhost:8081/v1.0/market/company/put/${this.company.companyCode}`;\n    const token = sessionStorage.getItem('token');\n    \n    const body = {\n      // ... update with your form controls\n    };\n\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + token\n      })\n    };\n\n    this.http.put(url, body, httpOptions).subscribe(\n      () => {\n        console.log('Company updated successfully');\n        this.closeModal.emit();\n      },\n      (error) => {\n        console.error(error);\n      }\n    );\n  }\n\n  // ... add any additional methods you need\n}\n","<p>company-update-modal works!</p>\n"],"mappings":"AAAA,SAAoBA,YAAY,QAA+B,eAAe;AAE9E,SAAqBC,WAAW,QAAQ,sBAAsB;;;;AAS9D,OAAM,MAAOC,2BAA2B;EAMtCC,YACUC,IAAgB,EAChBC,WAAwB;IADxB,KAAAD,IAAI,GAAJA,IAAI;IACJ,KAAAC,WAAW,GAAXA,WAAW;IAPZ,KAAAC,OAAO,GAAmB,IAAI;IAC7B,KAAAC,UAAU,GAAG,IAAIP,YAAY,EAAQ;EAO5C;EAEHQ,QAAQA,CAAA;IACN,IAAI,CAACC,UAAU,GAAG,IAAI,CAACJ,WAAW,CAACK,KAAK,CAAC;MACvC;IAAA,CACD,CAAC;EACJ;EAEAC,YAAYA,CAAA;IACV,IAAI,IAAI,CAACF,UAAU,CAACG,OAAO,IAAI,CAAC,IAAI,CAACN,OAAO,EAAE;MAC5C;;IAGF,MAAMO,GAAG,GAAG,iDAAiD,IAAI,CAACP,OAAO,CAACQ,WAAW,EAAE;IACvF,MAAMC,KAAK,GAAGC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;IAE7C,MAAMC,IAAI,GAAG;MACX;IAAA,CACD;IAED,MAAMC,WAAW,GAAG;MAClBC,OAAO,EAAE,IAAInB,WAAW,CAAC;QACvB,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,SAAS,GAAGc;OAC9B;KACF;IAED,IAAI,CAACX,IAAI,CAACiB,GAAG,CAACR,GAAG,EAAEK,IAAI,EAAEC,WAAW,CAAC,CAACG,SAAS,CAC7C,MAAK;MACHC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;MAC3C,IAAI,CAACjB,UAAU,CAACkB,IAAI,EAAE;IACxB,CAAC,EACAC,KAAK,IAAI;MACRH,OAAO,CAACG,KAAK,CAACA,KAAK,CAAC;IACtB,CAAC,CACF;EACH;EAAC,QAAAC,CAAA,G;qBA7CUzB,2BAA2B,EAAA0B,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;UAA3BhC,2BAA2B;IAAAiC,SAAA;IAAAC,MAAA;MAAA9B,OAAA;IAAA;IAAA+B,OAAA;MAAA9B,UAAA;IAAA;IAAA+B,KAAA;IAAAC,IAAA;IAAAC,QAAA,WAAAC,qCAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCXxCd,EAAA,CAAAgB,cAAA,QAAG;QAAAhB,EAAA,CAAAiB,MAAA,kCAA2B;QAAAjB,EAAA,CAAAkB,YAAA,EAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}